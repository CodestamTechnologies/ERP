// Prisma Schema for ERP System
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  avatar      String?
  role        String   @default("employee")
  permissions String[] @default([])
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee    Employee?
  createdExpenses Expense[] @relation("ExpenseCreatedBy")
  createdInvoices Invoice[] @relation("InvoiceCreatedBy")
  salesOrders Order[]   @relation("OrderAssignedTo")
  
  @@map("users")
}

// HR Module
model Employee {
  id         String   @id @default(cuid())
  employeeId String   @unique
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName  String
  lastName   String
  email      String   @unique
  phone      String
  department String
  position   String
  salary     Decimal
  hireDate   DateTime
  status     String   @default("active")
  
  // Address
  street     String
  city       String
  state      String
  zipCode    String
  country    String
  
  // Emergency Contact
  emergencyContactName         String
  emergencyContactRelationship String
  emergencyContactPhone        String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  payrolls    Payroll[]
  attendances Attendance[]
  leaves      Leave[]
  
  @@map("employees")
}

model Payroll {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  month        Int
  year         Int
  basicSalary  Decimal
  allowances   Json     @default("[]")
  deductions   Json     @default("[]")
  grossSalary  Decimal
  netSalary    Decimal
  tax          Decimal
  status       String   @default("draft")
  processedAt  DateTime?
  paidAt       DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([employeeId, month, year])
  @@map("payrolls")
}

model Attendance {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  date       DateTime @db.Date
  checkIn    DateTime?
  checkOut   DateTime?
  breakTime  Int      @default(0) // in minutes
  totalHours Decimal  @default(0)
  overtime   Decimal  @default(0)
  status     String   @default("present")
  notes      String?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([employeeId, date])
  @@map("attendances")
}

model Leave {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  type       String
  startDate  DateTime @db.Date
  endDate    DateTime @db.Date
  days       Int
  reason     String
  status     String   @default("pending")
  approvedBy String?
  approvedAt DateTime?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("leaves")
}

// Finance Module
model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id])
  
  issueDate     DateTime @db.Date
  dueDate       DateTime @db.Date
  items         Json     @default("[]")
  subtotal      Decimal
  tax           Decimal
  discount      Decimal
  total         Decimal
  status        String   @default("draft")
  paymentTerms  String
  notes         String?
  
  createdBy     String
  creator       User     @relation("InvoiceCreatedBy", fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("invoices")
}

model Expense {
  id            String   @id @default(cuid())
  category      String
  description   String
  amount        Decimal
  date          DateTime @db.Date
  paymentMethod String
  vendor        String?
  receipt       String?
  status        String   @default("pending")
  approvedBy    String?
  approvedAt    DateTime?
  tags          String[] @default([])
  
  createdBy     String
  creator       User     @relation("ExpenseCreatedBy", fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("expenses")
}

// Sales Module
model Customer {
  id           String   @id @default(cuid())
  type         String   // individual or business
  firstName    String?
  lastName     String?
  companyName  String?
  email        String   @unique
  phone        String
  website      String?
  industry     String?
  taxId        String?
  paymentTerms String
  creditLimit  Decimal  @default(0)
  status       String   @default("active")
  
  // Address
  street       String
  city         String
  state        String
  zipCode      String
  country      String
  
  // Billing Address (optional, can be same as main address)
  billingStreet   String?
  billingCity     String?
  billingState    String?
  billingZipCode  String?
  billingCountry  String?
  
  totalOrders  Int      @default(0)
  totalRevenue Decimal  @default(0)
  lastOrderDate DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orders       Order[]
  invoices     Invoice[]
  
  @@map("customers")
}

model Order {
  id                   String   @id @default(cuid())
  orderNumber          String   @unique
  customerId           String
  customer             Customer @relation(fields: [customerId], references: [id])
  
  status               String   @default("draft")
  priority             String   @default("medium")
  orderDate            DateTime @db.Date
  expectedDeliveryDate DateTime? @db.Date
  actualDeliveryDate   DateTime? @db.Date
  
  items                Json     @default("[]")
  subtotal             Decimal
  tax                  Decimal
  shipping             Decimal
  discount             Decimal
  total                Decimal
  
  paymentStatus        String   @default("pending")
  paymentMethod        String?
  
  // Shipping Address
  shippingStreet       String
  shippingCity         String
  shippingState        String
  shippingZipCode      String
  shippingCountry      String
  
  // Billing Address
  billingStreet        String
  billingCity          String
  billingState         String
  billingZipCode       String
  billingCountry       String
  
  notes                String?
  assignedTo           String?
  assignedUser         User?    @relation("OrderAssignedTo", fields: [assignedTo], references: [id])
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@map("orders")
}

// Inventory Module
model Product {
  id              String   @id @default(cuid())
  name            String
  sku             String   @unique
  barcode         String?
  description     String
  category        String
  brand           String?
  unitOfMeasure   String
  costPrice       Decimal
  sellingPrice    Decimal
  weight          Decimal?
  length          Decimal?
  width           Decimal?
  height          Decimal?
  images          String[] @default([])
  isActive        Boolean  @default(true)
  isSerialized    Boolean  @default(false)
  trackInventory  Boolean  @default(true)
  minStockLevel   Int      @default(0)
  maxStockLevel   Int      @default(0)
  reorderPoint    Int      @default(0)
  reorderQuantity Int      @default(0)
  supplierId      String?
  supplier        Supplier? @relation(fields: [supplierId], references: [id])
  tags            String[] @default([])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  stockLevels     Stock[]
  stockMovements  StockMovement[]
  
  @@map("products")
}

model Stock {
  id                String   @id @default(cuid())
  productId         String
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  locationId        String
  location          Location @relation(fields: [locationId], references: [id])
  
  quantityOnHand    Int      @default(0)
  quantityReserved  Int      @default(0)
  quantityAvailable Int      @default(0)
  averageCost       Decimal  @default(0)
  totalValue        Decimal  @default(0)
  lastMovementDate  DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([productId, locationId])
  @@map("stock")
}

model StockMovement {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  
  type       String   // in, out, transfer, adjustment
  reason     String   // purchase, sale, return, damage, etc.
  quantity   Int
  unitCost   Decimal?
  totalCost  Decimal?
  reference  String?
  notes      String?
  createdBy  String
  
  createdAt  DateTime @default(now())
  
  @@map("stock_movements")
}

model Location {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  type      String   // warehouse, store, virtual
  isActive  Boolean  @default(true)
  
  // Address
  street    String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stock          Stock[]
  stockMovements StockMovement[]
  
  @@map("locations")
}

model Supplier {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  contactPerson String
  email        String   @unique
  phone        String
  website      String?
  paymentTerms String
  currency     String   @default("USD")
  taxId        String?
  rating       Int      @default(3)
  status       String   @default("active")
  
  // Address
  street       String
  city         String
  state        String
  zipCode      String
  country      String
  
  totalOrders  Int      @default(0)
  totalValue   Decimal  @default(0)
  lastOrderDate DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  products     Product[]
  
  @@map("suppliers")
}

// Settings and Configuration
model Company {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  website     String?
  taxId       String?
  logo        String?
  
  // Address
  street      String
  city        String
  state       String
  zipCode     String
  country     String
  
  // Settings
  currency    String   @default("USD")
  timezone    String   @default("UTC")
  dateFormat  String   @default("MM/dd/yyyy")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("company")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  permissions String[] @default([])
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("roles")
}