'use client';

import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ExpenseReport } from '@/hooks/useExpenseClaims';
import { 
  FileText,
  Download,
  Calendar,
  DollarSign,
  BarChart3,
  Users
} from 'lucide-react';

interface ExpenseReportCardProps {
  report: ExpenseReport;
  onDownload: () => void;
  isProcessing: boolean;
}

const getReportTypeColor = (type: string) => {
  const colors: Record<string, string> = {
    'monthly': 'text-blue-600 bg-blue-50 border-blue-200',
    'quarterly': 'text-green-600 bg-green-50 border-green-200',
    'yearly': 'text-purple-600 bg-purple-50 border-purple-200',
    'custom': 'text-orange-600 bg-orange-50 border-orange-200'
  };
  return colors[type] || 'text-gray-600 bg-gray-50 border-gray-200';
};

export const ExpenseReportCard = ({
  report,
  onDownload,
  isProcessing
}: ExpenseReportCardProps) => {
  const topCategory = Object.entries(report.categories).sort(([,a], [,b]) => b - a)[0];
  const topDepartment = Object.entries(report.departments).sort(([,a], [,b]) => b - a)[0];

  return (
    <Card className="hover:shadow-sm transition-shadow">
      <CardContent className="p-6">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <div className="flex items-center gap-3 mb-3">
              <div className="w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center">
                <FileText size={24} className="text-purple-600" />
              </div>
              <div>
                <h3 className="font-semibold text-lg">{report.title}</h3>
                <p className="text-sm text-gray-500">Generated by {report.generatedBy}</p>
              </div>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="flex items-center gap-2">
                <DollarSign size={16} className="text-gray-400" />
                <div>
                  <p className="text-xs text-gray-500">Total Amount</p>
                  <p className="font-bold text-lg">${report.totalAmount.toLocaleString()}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <FileText size={16} className="text-gray-400" />
                <div>
                  <p className="text-xs text-gray-500">Claims</p>
                  <p className="font-medium text-sm">{report.claimsCount}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Calendar size={16} className="text-gray-400" />
                <div>
                  <p className="text-xs text-gray-500">Period</p>
                  <p className="font-medium text-sm">{report.period}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Calendar size={16} className="text-gray-400" />
                <div>
                  <p className="text-xs text-gray-500">Generated</p>
                  <p className="font-medium text-sm">
                    {new Date(report.generatedAt).toLocaleDateString()}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-gray-50 rounded-lg p-4 mb-4">
              <h4 className="font-medium mb-3">Report Summary</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <BarChart3 size={16} className="text-blue-600" />
                    <span className="text-sm font-medium">Top Category</span>
                  </div>
                  {topCategory && (
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600 capitalize">{topCategory[0]}</span>
                      <span className="font-semibold">${topCategory[1].toLocaleString()}</span>
                    </div>
                  )}
                </div>
                <div>
                  <div className="flex items-center gap-2 mb-2">
                    <Users size={16} className="text-green-600" />
                    <span className="text-sm font-medium">Top Department</span>
                  </div>
                  {topDepartment && (
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">{topDepartment[0]}</span>
                      <span className="font-semibold">${topDepartment[1].toLocaleString()}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Badge variant="outline" className={getReportTypeColor(report.type)}>
                {report.type} report
              </Badge>
              {report.fileUrl && (
                <Badge variant="outline" className="text-green-600 bg-green-50 border-green-200">
                  Available for download
                </Badge>
              )}
            </div>
          </div>

          <div className="flex flex-col items-end gap-3">
            <div className="text-right text-sm text-gray-500">
              <p>{Object.keys(report.categories).length} categories</p>
              <p>{Object.keys(report.departments).length} departments</p>
            </div>

            <div className="flex gap-2">
              <Button 
                size="sm"
                onClick={onDownload}
                disabled={isProcessing || !report.fileUrl}
              >
                <Download size={14} className="mr-2" />
                Download
              </Button>
              <Button size="sm" variant="outline">
                <BarChart3 size={14} className="mr-2" />
                View Details
              </Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};